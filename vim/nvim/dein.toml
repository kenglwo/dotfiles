[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction
    nnoremap <silent> <space>db :<C-u>Denite buffer<CR>
    nnoremap <silent> <space>df :<C-u>DeniteBufferDir -buffer-name=files file<CR>
    nnoremap <silent> <space>dm :<C-u>Denite file_mru<CR>
    nnoremap <silent> <space>dr :<C-u>Denite -buffer-name=register register<CR>
    nnoremap <silent> <space>dg :<C-u>Denite -auto_preview grep<CR>
    nnoremap <silent> <space>dc :<C-u>DeniteCursorWord grep<CR>
    nnoremap <silent> <space>da :<C-u>Denite -resume<CR>
    nnoremap <silent> <space>dp :<C-u>Denite neoyank<CR>
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['denite.vim']

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.vim']

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    map <C-n> :NERDTreeToggle<CR>
    let g:NERDTreeShowBookmarks=1
    let g:NERDTreeLimitedSyntax = 1
    let g:NERDTreeFileExtensionHighlightFullName = 1
    let g:NERDTreeExactMatchHighlightFullName = 1
    let g:NERDTreePatternMatchHighlightFullName = 1
    let g:NERDTreeHighlightFolders = 1
    let g:NERDTreeHighlightFoldersFullName = 1
    let NERDTreeShowLineNumbers=1
    let NERDTreeAutoDeleteBuffer=1
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    let g:webdevicons_enable = 1
    let g:webdevicons_enable_denite = 1
    let g:webdevicons_enable_nerdtree = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:webdevicons_enable_airline_tabline = 1
    let g:webdevicons_enable_airline_statusline = 1
		let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
		let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
    let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:DevIconsEnableFoldersOpenClose = 1
    let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
depends = ['nerdtree']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap <silent><Leader>gs :Gstatus<CR>
    nnoremap <silent><Leader>gw :Gwrite<CR>
    nnoremap <silent><Leader>gr :Gread<CR>
    nnoremap <silent><Leader>gc :Gcommit<CR>
    nnoremap <silent><Leader>gb :Gblame<CR>
    nnoremap <silent><Leader>gd :Gdiff<CR>
    nnoremap <silent><Leader>gm :Gmerge<CR>
    nnoremap <silent><Leader>gp :Gpush origin master<CR>
    nnoremap <silent><Leader>gl :Glog<CR>
'''

[[plugins]]
repo='airblade/vim-gitgutter'
depends = ['vim-fugitive']


[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
    set ambiwidth=double
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'angr'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'unique_tail'
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
    let g:airline_detect_modified=1
    let g:airline_detect_paste=1
    let g:airline#extensions#syntastic#enabled = 1
    let airline#extensions#syntastic#error_symbol = 'E:'
    let airline#extensions#syntastic#stl_format_err = '%E{[%e(#%fe)]}'
    let airline#extensions#syntastic#warning_symbol = 'W:'
    let airline#extensions#syntastic#stl_format_warn = '%W{[%w(#%fw)]}'
	let g:airline#extensions#ale#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
hook_add = '''
let g:bookmark_highlight_lines = 1
let g:bookmark_sign = '>>'
let g:bookmark_annotation_sign = '##'
let g:bookmark_no_default_key_mappings = 1
highlight BookmarkSign           guifg=#FF7C6C
highlight BookmarkAnnotationSign guifg=#FF7C6C
highlight BookmarkLine           guifg=#FF7C6C
highlight BookmarkAnnotationLine guifg=#FF7C6C

function! BookmarkMapKeys()
  nmap mm  :BookmarkToggle<CR>
  nmap mi  :BookmarkAnnotate<CR>
  nmap mn  :BookmarkNext<CR>
  nmap mp  :BookmarkPrev<CR>
  nmap mo  :BookmarkShowAll<CR>
  nmap mc  :BookmarkClear<CR>
  nmap mx  :BookmarkClearAll<CR>
  nmap mkk :BookmarkMoveUp<CR>
  nmap mjj :BookmarkMoveDown<CR>
endfunction

function! BookmarkUnmapKeys()
  unmap mm
  unmap mi
  unmap mn
  unmap mp
  unmap mo
  unmap mc
  unmap mx
  unmap mkk
  unmap mjj
endfunction
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {
        \ "_" : {
          \ 'runner': 'vimproc',
          \ 'runner/vimproc/updatetime' : 60,
          \ 'outputter/buffer/split'  : ':rightbelow 8sp',
          \ 'outputter/buffer/info'  : 1,
          \ 'outputter/buffer/close_on_empty'  : 1,
          \ 'outputter' : 'error',
          \ 'outputter/error/error' : 'quickfix',
          \ 'outputter/error/success' : 'quickfix',
          \ 'hook/time/enable ' : 1,
          \ 'hook/time/format': '*** time: %g seconds ***',
          \ 'hook/output_encode/enable' : 1,
          \ 'hook/output_encode/encoding' : 'utf-8:&encoding',
          \ 'hook/shabadoubi_touch_henshin/enable' : 1,
          \ 'hook/shabadoubi_touch_henshin/wait' : 20,
       \ },
    \}
    au FileType qf nnoremap <silent><buffer>q :quit<CR>
    au FileType bf nnoremap <silent><buffer>q :quit<CR>
    set splitbelow
    noremap qr :QuickRun <CR>
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
    autocmd BufEnter *           :call BookmarkMapKeys()
    autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-speeddating'


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
	nmap <silent> <C-k> <Plug>(ale_previous_wrap)
	nmap <silent> <C-j> <Plug>(ale_next_wrap)
	let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 1
  let g:ale_sign_column_always = 1
  let g:ale_open_list = 0
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_keep_list_window_open = 0
	let g:ale_fixers = {
	\   'javascript': ['prettier', 'eslint'],
	\   'typescript': ['prettier', 'eslint'],
	\   'typescript.react': ['prettier', 'eslint'],
	\   'typescriptreact': ['prettier', 'eslint'],
	\   'python': ['prettier', 'pylint'],
	\   'css': ['prettier', 'stylelint'],
	\   'ruby': ['rubocop']
	\}
	let g:ale_fix_on_save = 1
	let g:airline#extensions#ale#enabled = 1
	let g:ale_set_highlights = 0
	let g:ale_linters = {
		\ 'html': ['tidy'],
		\ 'css': ['stylelint'],
		\ 'python': ['pylint'],
		\ 'javascript': ['eslint'],
		\ 'typescript': [''],
		\ 'typescript.react': [''],
		\ 'typescriptreact': [''],
		\ 'vue': ['eslint'],
		\	'swift': ['swiftlint'],
		\	'yaml': ['yamllint'],
		\	'vim': ['vint'],
		\ 'ruby': ['rubocop']
		\}
'''

[[plugins]]
repo = 'cohama/lexima.vim'
